import {Note} from '../Note';
import {NoteName} from '../NoteName';

describe('Note', () => {
    it('should be able to handle equivalencies', () => {
        const note1 = new Note(NoteName.A,4);
        const note2 = new Note(NoteName.A,4);
        expect(note1).toEqual(note2);
        const note3 = new Note(NoteName.A,3);
        expect(note1).not.toEqual(note3);
        const note4 = new Note(NoteName.B,3);
        expect(note1).not.toEqual(note4);
        const note5 = new Note(NoteName.B,4);
        expect(note1).not.toEqual(note5);
    });
    it('should be able to create a new note with correct properties', () => {
        const note = new Note(NoteName.A, 4);
        expect(note).toHaveProperty('noteName', NoteName.A);
        expect(note).toHaveProperty('octave', 4);
    });
    it('should provide the correct filename for its sound file in /sound_files for the trivial natural note case', () => {
        let note = new Note(NoteName.A, 4);
        let expected = 'a4piano.mp3';
        let actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.B, 2);
        expected = 'b2piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.C, 6);
        expected = 'c6piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.D, 1);
        expected = 'd1piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.E, 0);
        expected = 'e0piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.F, 3);
        expected = 'f3piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.G, 8);
        expected = 'g8piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
    });
    it('should provide the correct filename for its sound file in /sound_files for the sharp note case', () => {
        let note = new Note(NoteName.ASharp, 4);
        let expected = 'asharp4piano.mp3';
        let actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        //octave goes up by 1 at each 'C' -- this is the tricky case
        note = new Note(NoteName.BSharp, 2);
        expected = 'c3piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.CSharp, 6);
        expected = 'csharp6piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.DSharp, 1);
        expected = 'dsharp1piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.ESharp, 0);
        expected = 'f0piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.FSharp, 3);
        expected = 'fsharp3piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.GSharp, 8);
        expected = 'gsharp8piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
    });
    it('should provide the correct filename for its sound file in /sound_files for the flat note case', () => {
        let note = new Note(NoteName.AFlat, 4);
        let expected = 'gsharp4piano.mp3';
        let actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.BFlat, 2);
        expected = 'asharp2piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        //tricky case again
        note = new Note(NoteName.CFlat, 6);
        expected = 'b5piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.DFlat, 1);
        expected = 'csharp1piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.EFlat, 0);
        expected = 'dsharp0piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.FFlat, 3);
        expected = 'e3piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.GFlat, 8);
        expected = 'fsharp8piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
    });
    it('should provide the correct filename for its sound file in /sound_files for the double sharp note case', () => {
        let note = new Note(NoteName.ADoubleSharp, 4);
        let expected = 'b4piano.mp3';
        let actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        //tricky case
        note = new Note(NoteName.BDoubleSharp, 2);
        expected = 'csharp3piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.CDoubleSharp, 6);
        expected = 'd6piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.DDoubleSharp, 1);
        expected = 'e1piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.EDoubleSharp, 0);
        expected = 'fsharp0piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.FDoubleSharp, 3);
        expected = 'g3piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.GDoubleSharp, 8);
        expected = 'a8piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
    });
    it('should provide the correct filename for its sound file in /sound_files for the double flat note case', () => {
        let note = new Note(NoteName.ADoubleFlat, 4);
        let expected = 'g4piano.mp3';
        let actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.BDoubleFlat, 2);
        expected = 'a2piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        //The tricky case to end all tricky cases
        note = new Note(NoteName.CDoubleFlat, 6);
        expected = 'asharp5piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.DDoubleFlat, 1);
        expected = 'c1piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.EDoubleFlat, 0);
        expected = 'd0piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.FDoubleFlat, 3);
        expected = 'dsharp3piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
        note = new Note(NoteName.GDoubleFlat, 8);
        expected = 'f8piano.mp3';
        actual = note.getSoundFileName();
        expect(actual).toEqual(expected);
    });
});
